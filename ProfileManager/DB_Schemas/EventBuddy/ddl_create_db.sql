--create database EVENTBUDDY_DB
CREATE DATABASE EVENTBUDDY_DB;

--connect to database EVENTBUDDY_DB
\c eventbuddy_db

--create table ROLE
CREATE TABLE ROLE(
  ROLE_ID INTEGER PRIMARY KEY,
  ROLE_NAME VARCHAR(50) NOT NULL UNIQUE
);

--create table APPUSER
CREATE TABLE APPUSER(
  EMAIL_ID VARCHAR(50) PRIMARY KEY,
  NAME VARCHAR(50) NOT NULL,
  PHONE_NUMBER VARCHAR(10) NOT NULL,
  ROLE_ID INTEGER,
  CONSTRAINT "appuser_role_id_fkey"
  FOREIGN KEY(ROLE_ID)
  REFERENCES ROLE(ROLE_ID)
  ON UPDATE CASCADE
);

--create table MOVIE
CREATE TABLE MOVIE(
  MOVIE_NAME VARCHAR(50) PRIMARY KEY,
  LANGUAGE VARCHAR(10) NOT NULL,
  THEME VARCHAR(10),
  DISTRIBUTOR_ID VARCHAR(50) NOT NULL,
  CONSTRAINT "movie_distributor_id_fkey"
  FOREIGN KEY(DISTRIBUTOR_ID)
  REFERENCES APPUSER(EMAIL_ID)
  ON DELETE CASCADE
  ON UPDATE CASCADE
);

--create table THEATRE
CREATE TABLE THEATRE(
  THEATRE_ID SERIAL PRIMARY KEY,
  NAME VARCHAR(50) NOT NULL,
  LOCATION VARCHAR(20),
  OWNER_ID VARCHAR(50),
  CONSTRAINT "theatre_owner_id_fkey"
  FOREIGN KEY(OWNER_ID)
  REFERENCES APPUSER(EMAIL_ID)
  ON DELETE CASCADE
  ON UPDATE CASCADE
);

--create table WATCHLIST
CREATE TABLE WATCHLIST(
  MOVIE_ID SERIAL PRIMARY KEY,
  MOVIE_NAME VARCHAR(50),
  VIEWER_ID VARCHAR(50),
  CONSTRAINT "watchlist_movie_name_fkey"
  FOREIGN KEY(MOVIE_NAME)
  REFERENCES MOVIE(MOVIE_NAME)
  ON DELETE CASCADE
  ON UPDATE CASCADE,
  CONSTRAINT "watchlist_viewer_id_fkey"
  FOREIGN KEY(VIEWER_ID)
  REFERENCES APPUSER(EMAIL_ID)
  ON DELETE CASCADE
  ON UPDATE CASCADE
);

--create table SCREEN
CREATE TABLE SCREEN(
  SCREEN_ID SERIAL PRIMARY KEY,
  SCREEN_NAME VARCHAR(20) NOT NULL,
  SEAT_COUNT INTEGER NOT NULL,
  THEATRE_ID INTEGER NOT NULL,
  MOVIE_NAME VARCHAR(50),
  CONSTRAINT "screen_theatre_id_fkey"
  FOREIGN KEY(THEATRE_ID)
  REFERENCES THEATRE(THEATRE_ID)
  ON DELETE CASCADE
  ON UPDATE CASCADE,
  CONSTRAINT "screen_movie_name_fkey"
  FOREIGN KEY(MOVIE_NAME)
  REFERENCES MOVIE(MOVIE_NAME)
  ON DELETE CASCADE
  ON UPDATE CASCADE
);

--create table SESSION
CREATE TABLE SESSION(
  SESSION_ID SERIAL PRIMARY KEY,
  SEAT_COUNT INTEGER NOT NULL,
  START_TIME TIMESTAMP NOT NULL,
  END_TIME TIMESTAMP NOT NULL,
  SCREEN_ID INTEGER NOT NULL,
  CONSTRAINT "session_screen_id_fkey"
  FOREIGN KEY(SCREEN_ID)
  REFERENCES SCREEN(SCREEN_ID)
  ON DELETE CASCADE
  ON UPDATE CASCADE
);

--create table TICKET
CREATE TABLE TICKET(
  TICKET_ID SERIAL PRIMARY KEY,
  SESSION_ID INTEGER NOT NULL,
  VIEWER_ID VARCHAR(50) NOT NULL,
  CONSTRAINT "ticket_session_id_fkey"
  FOREIGN KEY(SESSION_ID)
  REFERENCES SESSION(SESSION_ID)
  ON DELETE CASCADE
  ON UPDATE CASCADE,
  CONSTRAINT "ticket_viewer_id_fkey"
  FOREIGN KEY(VIEWER_ID)
  REFERENCES APPUSER(EMAIL_ID)
  ON DELETE CASCADE
  ON UPDATE CASCADE
);

--create VIEW SESSION_MOVIE
CREATE VIEW SESSION_MOVIE AS
SELECT SESSION.SESSION_ID AS SESSION_ID,
(SELECT SCREEN.MOVIE_NAME FROM SCREEN WHERE SCREEN.SCREEN_ID=SESSION.SESSION_ID) AS MOVIE_NAME
FROM SESSION;
